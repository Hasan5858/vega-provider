"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value)})).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStream=void 0;const getStream=function(_a){return __awaiter(this,arguments,void 0,function*({link:link,signal:signal,providerContext:providerContext}){try{const data=(yield providerContext.axios.get(link,{signal:signal})).data,$=providerContext.cheerio.load(data),streams=[],promises=$("a[href]:contains('Download'), .button2,.button1,.button3,.button4,.button").toArray().map(element=>__awaiter(this,void 0,void 0,function*(){const title=$(element).text().trim();let elementLink=$(element).attr("href");if(!title||!elementLink)return;if(title.includes("GDFLIX")&&elementLink){const gdLinks=yield providerContext.extractors.gdFlixExtracter(elementLink,signal);return void streams.push(...gdLinks)}if(title.includes("Watch")||title.includes("Login")||title.includes("Signup")||title.includes("Privacy")||title.includes("DMCA")||title.includes("Contact")||title.includes("Linkmake"))return;streams.find(s=>s.link===elementLink)||streams.push({server:title,link:elementLink,type:"mkv"})}));return yield Promise.all(promises),streams}catch(err){return[]}})};exports.getStream=getStream;