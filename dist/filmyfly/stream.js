"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value)})).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};function extractQualityFromText(qualityText){const text=qualityText.toLowerCase();return text.includes("1080p")||text.includes("1080")?"1080":text.includes("720p")||text.includes("720")?"720":text.includes("480p")||text.includes("480")?"480":text.includes("4k")||text.includes("2160p")||text.includes("2160")?"2160":text.includes("360p")||text.includes("360")?"360":void 0}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStream=void 0;const getStream=function(_a){return __awaiter(this,arguments,void 0,function*({link:link,signal:signal,providerContext:providerContext}){try{const url=link.replace("filmyfly.deals","filmyfly.observer"),data=(yield providerContext.axios.get(url,{signal:signal})).data,$=providerContext.cheerio.load(data),streams=[];if(url.includes("linkmake.in"))try{const linkmakeData=(yield providerContext.axios.get(url,{signal:signal})).data,linkmake$=providerContext.cheerio.load(linkmakeData),qualityPromises=[];return linkmake$("a").each((i,element)=>{const qualityText=linkmake$(element).text().trim(),qualityLink=linkmake$(element).attr("href");if(qualityText&&qualityText.includes("Download")&&qualityLink&&qualityLink.includes("filesdl")){const fullLink=qualityLink.startsWith("http")?qualityLink:`https://linkmake.in${qualityLink}`,promise=(()=>__awaiter(this,void 0,void 0,function*(){try{const serverData=(yield providerContext.axios.get(fullLink,{signal:signal})).data,server$=providerContext.cheerio.load(serverData),serverPromises=[];server$("a[href], button[onclick]").each((j,serverElement)=>{const serverText=server$(serverElement).text().trim(),serverLink=server$(serverElement).attr("href")||server$(serverElement).attr("onclick");if(serverText&&serverLink){const finalLink=serverLink.startsWith("http")?serverLink:serverLink.startsWith("/")?`https://${new URL(fullLink).hostname}${serverLink}`:fullLink,promise=(()=>__awaiter(this,void 0,void 0,function*(){try{const needsExtraction=finalLink.includes("bbdownload")||finalLink.includes("filesdl")||finalLink.includes("fastdl")||finalLink.includes("hubcloud")||finalLink.includes("fdownload.php")||finalLink.includes("fastdla.php");if(serverText.toLowerCase().includes("fast cloud")&&finalLink.includes("awsstorage")&&!needsExtraction){const quality=extractQualityFromText(qualityText);streams.push({server:"Fast Cloud",link:finalLink,type:"mkv",quality:quality})}else if(serverText.toLowerCase().includes("gofile")){const gofileId=finalLink.split("/").pop();if(gofileId){const gofileResult=yield providerContext.extractors.gofileExtracter(gofileId);if(gofileResult.link){const quality=extractQualityFromText(qualityText);streams.push({server:"GoFile",link:gofileResult.link,type:"mkv",quality:quality})}}}else if(serverText.toLowerCase().includes("gdflix")){const gdflixStreams=yield providerContext.extractors.gdFlixExtracter(finalLink,signal),quality=extractQualityFromText(qualityText);gdflixStreams.forEach(stream=>{streams.push({server:stream.server,link:stream.link,type:stream.type,quality:quality})})}else if(needsExtraction||serverText.toLowerCase().includes("ultra fastdl")||serverText.toLowerCase().includes("fastdl")||serverText.toLowerCase().includes("direct download")||serverText.toLowerCase().includes("fast cloud-02")){const hubcloudStreams=yield providerContext.extractors.hubcloudExtracter(finalLink,signal),quality=extractQualityFromText(qualityText);hubcloudStreams.forEach(stream=>{streams.push({server:stream.server,link:stream.link,type:stream.type,quality:quality})})}else{if((finalLink.includes(".mkv")||finalLink.includes(".mp4")||finalLink.includes(".avi"))&&!finalLink.includes("?id=")&&!finalLink.includes("fdownload.php")&&!finalLink.includes("fastdla.php")){const quality=extractQualityFromText(qualityText);streams.push({server:"Direct",link:finalLink,type:"mkv",quality:quality})}else{const hubcloudStreams=yield providerContext.extractors.hubcloudExtracter(finalLink,signal),quality=extractQualityFromText(qualityText);hubcloudStreams.forEach(stream=>{streams.push({server:stream.server,link:stream.link,type:stream.type,quality:quality})})}}}catch(extractorError){if((finalLink.includes(".mkv")||finalLink.includes(".mp4")||finalLink.includes(".avi"))&&!finalLink.includes("?id=")&&!finalLink.includes("bbdownload")&&!finalLink.includes("filesdl")&&!finalLink.includes("fdownload.php")&&!finalLink.includes("fastdla.php")&&finalLink.includes("awsstorage")){const quality=extractQualityFromText(qualityText);streams.push({server:"Direct",link:finalLink,type:"mkv",quality:quality})}}}))();serverPromises.push(promise)}}),yield Promise.all(serverPromises)}catch(serverError){streams.push({server:qualityText,link:fullLink,type:"mkv"})}}))();qualityPromises.push(promise)}}),yield Promise.all(qualityPromises),0===streams.length&&linkmake$("a").each((i,element)=>{const linkText=linkmake$(element).text().trim(),linkHref=linkmake$(element).attr("href");linkText.toLowerCase().includes("download")&&linkHref&&!linkHref.includes("javascript:")&&streams.push({server:linkText,link:linkHref.startsWith("http")?linkHref:`https://linkmake.in${linkHref}`,type:"mkv"})}),streams}catch(linkmakeError){return streams.push({server:"Direct Download",link:url,type:"mkv"}),streams}const promises=$(".dlbtn a, .button2,.button1,.button3,.button4,.button").toArray().map(element=>__awaiter(this,void 0,void 0,function*(){const title=$(element).text();let link=$(element).attr("href");if(link)if(title.includes("GDFLIX")&&link){const gdLinks=yield providerContext.extractors.gdFlixExtracter(link,signal);streams.push(...gdLinks)}else if(title.includes("GoFile")&&link){const gofileResult=yield providerContext.extractors.gofileExtracter(link);streams.push({server:"GoFile",link:gofileResult.link,type:"mkv",quality:extractQualityFromText(title)})}else if(link.includes("hubcloud")||link.includes("bbdownload")||title.includes("HubCloud")){const hubcloudLinks=yield providerContext.extractors.hubcloudExtracter(link,signal);streams.push(...hubcloudLinks)}else if(link&&!title.includes("Watch")&&!title.includes("Login"))try{const response=yield providerContext.axios.get(link,{headers:{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"},timeout:1e4}),$page=providerContext.cheerio.load(response.data),directLinks=$page('a[href*=".mkv"], a[href*=".mp4"], a[href*=".avi"], a[href*=".mov"]').toArray();if(directLinks.length>0){const directLink=$page(directLinks[0]).attr("href");if(directLink&&directLink.includes(".")){const fullUrl=directLink.startsWith("http")?directLink:`${link.split("/").slice(0,3).join("/")}${directLink}`;streams.push({server:title,link:fullUrl,type:"mkv",quality:extractQualityFromText(title)})}}}catch(error){}}));return yield Promise.all(promises),streams}catch(err){return[]}})};exports.getStream=getStream;