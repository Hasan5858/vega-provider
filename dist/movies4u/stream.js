"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value)})).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStream=getStream;const WORKER_URL="https://movies4u.steep-bread-3c84.workers.dev";function getQualityFromService(serviceName){return serviceName.includes("1080")||serviceName.includes("4K")?"1080":serviceName.includes("2160")?"2160":serviceName.includes("480")?"480":serviceName.includes("360")?"360":serviceName.includes("FastDL")||serviceName.includes("GDFlix")||serviceName.includes("HubCloud")||serviceName.includes("GoFile")||serviceName.includes("VCloud")?"720":serviceName.includes("FilePres")?"480":"720"}function extractStream(url_1,extractors_1,signal_1){return __awaiter(this,arguments,void 0,function*(url,extractors,signal,serviceName="Unknown"){if(!url)return[];if(url.includes(".mp4")||url.includes(".mkv")||url.includes(".avi"))return[{server:serviceName||"Direct",link:url,type:"mp4",quality:getQualityFromService(serviceName)}];if(url.includes("hubcloud")){const extracted=yield extractors.hubcloudExtracter(url,signal);return(null==extracted?void 0:extracted.map(s=>Object.assign(Object.assign({},s),{server:s.server||"HubCloud",quality:s.quality||getQualityFromService("HubCloud")})))||[]}if(url.includes("gdflix")){const extracted=yield extractors.gdFlixExtracter(url,signal);return(null==extracted?void 0:extracted.map(s=>Object.assign(Object.assign({},s),{server:s.server||"GDFlix",quality:s.quality||getQualityFromService("GDFlix")})))||[]}if(url.includes("gofile")){const extracted=yield extractors.gofileExtracter(url);return extracted&&extracted.link?[{server:"GoFile",link:extracted.link,type:"mp4",quality:getQualityFromService("GoFile")}]:[]}if(url.includes("fastdl")){const extracted=yield extractors.fastdlExtractor(url,signal);return(null==extracted?void 0:extracted.map(s=>Object.assign(Object.assign({},s),{server:s.server||"FastDL",quality:s.quality||getQualityFromService("FastDL")})))||[]}if(url.includes("vcloud")){const extracted=yield extractors.vcloudExtractor(url,signal);return(null==extracted?void 0:extracted.map(s=>Object.assign(Object.assign({},s),{server:s.server||"VCloud",quality:s.quality||getQualityFromService("VCloud")})))||[]}if(url.includes("filepress")){const extracted=yield extractors.filepresExtractor(url,signal);return(null==extracted?void 0:extracted.map(s=>Object.assign(Object.assign({},s),{server:s.server||"FilePres",quality:s.quality||getQualityFromService("FilePres")})))||[]}return url.includes("hubdrive")?[{server:"HubDrive",link:url,type:"mp4",quality:getQualityFromService("HubDrive")}]:[]})}function getStream(_a){return __awaiter(this,arguments,void 0,function*({link:link,type:type,signal:signal,providerContext:providerContext}){const{axios:axios,extractors:extractors}=providerContext;try{const{data:data}=yield axios.get(WORKER_URL,{params:{action:"stream",link:link},signal:signal,timeout:3e4});if(!data.success||!Array.isArray(data.streams))return[];const allStreams=[];for(const streamLink of data.streams)try{const url=streamLink.link,serviceName=streamLink.server||"Unknown";if(!url||url.includes("how-to-download")||url.includes("tutorial")||url.includes("gdtot"))continue;if(url.includes("nexdrive")){const extracted=yield extractors.nexdriveExtractor(url,signal);if(extracted&&extracted.length>0)for(const serviceLink of extracted)try{const linkServiceName=serviceLink.server||"Service",finalStreams=yield extractStream(serviceLink.link,extractors,signal,linkServiceName);finalStreams&&finalStreams.length>0?allStreams.push(...finalStreams):allStreams.push(serviceLink)}catch(err){allStreams.push(serviceLink)}}else{const extracted=yield extractStream(url,extractors,signal,serviceName);extracted&&extracted.length>0&&allStreams.push(...extracted)}}catch(extractorError){}return allStreams}catch(error){return[]}})}