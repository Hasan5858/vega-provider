"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value)})).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getEpisodes=void 0;const getEpisodes=function(_a){return __awaiter(this,arguments,void 0,function*({url:url,providerContext:providerContext}){const{axios:axios,cheerio:cheerio,commonHeaders:headers}=providerContext;console.log("getEpisodeLinks",url);try{const res=yield axios.get(url,{headers:Object.assign(Object.assign({},headers),{Referer:"https://movies4u.ps/"})}),$=cheerio.load(res.data),episodes=[];return $("h4").each((index,element)=>{const el=$(element),title=el.text().trim();if(title.includes("Episodes:")&&title.includes(":-")){const episodeMatch=title.match(/-:Episodes:\s*(\d+):-/);if(episodeMatch){const cleanedTitle=`Episode ${episodeMatch[1]}`,serverLinks=[],nextElements=el.nextAll();for(let i=0;i<nextElements.length&&i<10;i++){const nextEl=$(nextElements[i]);if(nextEl.is("h4")&&nextEl.text().includes("Episodes:"))break;nextEl.find("a[href]").each((j,linkEl)=>{const $link=$(linkEl),href=$link.attr("href"),text=$link.text().trim();if(href&&text&&(text.toLowerCase().includes("g-direct")||text.toLowerCase().includes("v-cloud")||text.toLowerCase().includes("filepress")||text.toLowerCase().includes("instant")||text.toLowerCase().includes("resumable")||text.toLowerCase().includes("g-drive")||href.includes("fastdl.zip")||href.includes("vcloud.zip")||href.includes("filebee.xyz"))){let serverType="Unknown";text.toLowerCase().includes("g-direct")||href.includes("fastdl.zip")?serverType="G-Direct":text.toLowerCase().includes("v-cloud")||href.includes("vcloud.zip")?serverType="V-Cloud":(text.toLowerCase().includes("filepress")||text.toLowerCase().includes("g-drive")||href.includes("filebee.xyz"))&&(serverType="Filepress"),serverLinks.push({title:`${serverType} - ${text}`,link:href})}})}serverLinks.length>0?serverLinks.forEach((serverLink,serverIndex)=>{episodes.push({title:`${cleanedTitle} - ${serverLink.title}`,link:serverLink.link})}):episodes.push({title:cleanedTitle,link:url})}}}),0===episodes.length&&$("h3, h5").each((index,element)=>{const el=$(element),title=el.text().trim();if(title.toLowerCase().includes("episode")||title.match(/\d+/)){let downloadLink="";const nextElements=el.nextAll();for(let i=0;i<nextElements.length&&i<3;i++){if($(nextElements[i]).find("a[href]").each((j,linkEl)=>{const href=$(linkEl).attr("href");if(href&&(href.includes("hubcloud")||href.includes("nexdrive")))return downloadLink=href,!1}),downloadLink)break}downloadLink||(downloadLink=url),episodes.push({title:title.replace(/[-:]/g,"").trim(),link:downloadLink})}}),console.log(`Found ${episodes.length} episodes`),episodes}catch(err){return console.log("getEpisodeLinks error:",err.message),[]}})};exports.getEpisodes=getEpisodes;