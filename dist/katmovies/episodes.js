"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value)})).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getEpisodes=void 0,exports.extractKmhdLink=extractKmhdLink;const getEpisodes=function(_a){return __awaiter(this,arguments,void 0,function*({url:url,providerContext:providerContext}){const{axios:axios,cheerio:cheerio}=providerContext,episodesLink=[];try{if(url.includes("gdflix")){const urlParts=url.split("/pack");if(!urlParts||0===urlParts.length)return console.error("Invalid gdflix URL structure:",url),[];const baseUrl=urlParts[0],data=(yield axios.get(url)).data,$=cheerio.load(data),links=$(".list-group-item");if(null==links||links.map((i,link)=>{episodesLink.push({title:$(link).text()||"",link:baseUrl+$(link).find("a").attr("href")||""})}),episodesLink.length>0)return episodesLink}if(url.includes("/pack")){const epIds=yield extractKmhdEpisodes(url,providerContext);null==epIds||epIds.forEach((id,index)=>{episodesLink.push({title:`Episode ${index+1}`,link:url.split("/pack")[0]+"/file/"+id})})}const episodeData=(yield axios.get(url,{headers:{Cookie:"_ga_GNR438JY8N=GS1.1.1729446000.1.1729446000.0.0.0; _ga=GA1.1.372196696.1722150754; unlocked=true"}})).data,$=cheerio.load(episodeData),links=$(".autohyperlink");return null==links||links.map((i,link)=>{episodesLink.push({title:$(link).parent().children().remove().end().text()||"",link:$(link).attr("href")||""})}),episodesLink}catch(err){return console.error(err),[]}})};function extractKmhdLink(katlink,providerContext){return __awaiter(this,void 0,void 0,function*(){try{const{axios:axios}=providerContext,data=(yield axios.get(katlink)).data,uploadLinksMatch=data.match(/upload_links:\s*{[^}]*?hubdrive_res:"([^"]+)"/);if(!uploadLinksMatch||!uploadLinksMatch[1])return console.error("Failed to extract hubdrive_res ID from upload_links"),null;const hubdriveId=uploadLinksMatch[1],linksMatch=data.match(/hubdrive_res:\s*{[^}]*?link:\s*"([^"]+)"/);if(!linksMatch||!linksMatch[1])return console.error("Failed to extract hubdrive base URL from links"),null;const finalLink=linksMatch[1]+hubdriveId;return console.log("Extracted hubdrive link:",finalLink),finalLink}catch(error){return console.error("Error in extractKmhdLink:",error.message),null}})}function extractKmhdEpisodes(katlink,providerContext){return __awaiter(this,void 0,void 0,function*(){try{const{axios:axios}=providerContext,res=yield axios.get(katlink),ids=res.data.match(/[\w]+_[a-f0-9]{8}/g);return ids&&0!==ids.length?ids:(console.warn("No episodes found for katlink:",katlink),[])}catch(error){return console.error("Error in extractKmhdEpisodes:",error.message),[]}})}exports.getEpisodes=getEpisodes;